{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAmBzBC,EAAsB,SAAAC,G,IAAEC,EAAQD,EAARE,SAAUC,EAAMH,EAANG,OAAQC,EAAIJ,EAAJI,KAE1CC,EAAUC,aAAY,WAExBL,GAAY,EAkBP,IAAIM,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,IAIlCC,QAAQC,IAAI,6BAEZL,EAAQ,+CAGRC,EAAO,0CACPG,QAAQC,IAAI,6B,IA3BbC,MAAK,SAAAC,G,IAAGb,EAAQa,EAARb,SAAUc,EAAKD,EAALC,MACjBvB,EAAAwB,OAAOC,QAAQ,uBAAwCC,OAAfjB,EAAS,QAAYiB,OAANH,EAAM,M,IAE9DI,OAAM,SAAAL,G,IAAGb,EAAQa,EAARb,SAAUc,EAAKD,EAALC,MAClBvB,EAAAwB,OAAOI,QAAQ,sBAAqCF,OAAfjB,EAAS,QAAYiB,OAANH,EAAM,M,IAG1Df,IAAaE,IACfS,QAAQC,IAAI,sBAAuBZ,EAAUE,GAC7CmB,cAAcjB,G,GAGfD,E,EAoBLT,EAAKC,KAAK2B,iBAAiB,UAvDH,SAACC,GACvBA,EAAMC,iBAEN,IAAMC,EAASF,EAAME,OAEjBC,EAAa,CACfvB,KAAMwB,OAAOF,EAAOG,KAAK,QAAQC,OACjCd,MAAOY,OAAOF,EAAOG,KAAK,SAASC,OACnC3B,OAAQyB,OAAOF,EAAOG,KAAK,UAAUC,OACrC5B,SAAU,GAGV6B,YAAW,WACThC,EAAoB4B,E,GACnBA,EAAWX,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('form'),\n}\nconst onStartFunction = (event) => {\n  event.preventDefault();\n\n  const target = event.target;\n\n  let valuesForm = {\n    step: Number(target[name=\"step\"].value),\n    delay: Number(target[name=\"delay\"].value),\n    amount: Number(target[name=\"amount\"].value),\n    position: 0,\n  };\n\n    setTimeout(() => {\n      setIntervalFunction(valuesForm)\n    }, valuesForm.delay)\n}\n\nconst setIntervalFunction = ({position, amount, step}) => {\n\n  let timerId = setInterval(() => {\n\n    position += 1;\n    createPromise(position, step)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    if (position === amount) {\n      console.log('valuesForm.position', position, amount);\n      clearInterval(timerId);\n    }\n\n  }, step)\n}\n\nfunction createPromise() {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        // Fulfill\n        console.log('createPromiseFunction++++');\n\n        resolve(\"Success! Value passed to resolve function\");\n      } else {\n        // Reject\n        reject(\"Error! Error passed to reject function\");\n        console.log('createPromiseFunction----');\n      }\n  })\n}\n\nrefs.form.addEventListener('submit', onStartFunction);"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$setIntervalFunction","param1","position1","position","amount","step","timerId","setInterval","Promise","resolve","reject","Math","random","console","log","then","param","delay","Notify","success","concat","catch","failure","clearInterval","addEventListener","event","preventDefault","target","valuesForm","Number","name","value","setTimeout"],"version":3,"file":"03-promises.b2579221.js.map"}